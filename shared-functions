#!/bin/bash -eux

function check_input_params() {
  set +x
  if [ -z "$MANIFEST_FILE" ]; then
    echo "MANIFEST_FILE has not been set"
    exit 1
  fi

  if [ -z "$VARS_STORE_FILE" ]; then
    echo "VARS_STORE_FILE has not been set"
    exit 1
  fi

  if [ -z "$SYSTEM_DOMAIN" ]; then
    echo "SYSTEM_DOMAIN has not been set"
    exit 1
  fi

  if ${FAIL_ON_DOWNTIME}; then
    if [ -z "${DEPLOY_WITH_UPTIME_MEASUREMENTS}" ]; then
      echo "FAIL_ON_DOWNTIME requires that DEPLOY_WITH_UPTIME_MEASUREMENTS be true. Exiting."
      exit 1
    fi
  fi
  set -x
}

function set_git_config() {
  if [ -z "${GIT_COMMIT_USERNAME}" ]; then
    GIT_COMMIT_USERNAME="CI Bot"
  fi

  if [ -z "${GIT_COMMIT_EMAIL}" ]; then
    GIT_COMMIT_EMAIL="cf-release-integration@pivotal.io"
  fi

  git config user.name "${GIT_COMMIT_USERNAME}"
  git config user.email "${GIT_COMMIT_EMAIL}"
}

function commit_vars_store() {
  pushd vars-store
    if [[ -n $(git status --porcelain) ]]; then
      set_git_config
      git add "${VARS_STORE_FILE}"
      git commit -m "Update vars-store after deploy"
    fi
  popd

  shopt -s dotglob
  cp -R vars-store/* updated-vars-store/
}

function setup_bosh_env_vars() {
  set +ux
  pushd bbl-state/"${BBL_STATE_DIR}"
    eval "$(bbl print-env)"
  popd

  # Kill all ssh connections on exit.
  # This is needed so that tasks using bbl print-env in a credhub environment
  # don't hang after the script is finished.
  trap "pkill ssh || true" EXIT INT TERM
  set -ux
}

function bosh_interpolate() {
  set +u
  local root_dir
  root_dir="${1}"

  local release_name
  release_name="${2}"
  set -u

  local bosh_manifest
  bosh_manifest="cf-deployment/${MANIFEST_FILE}"

  local arguments
  arguments="--vars-store vars-store/${VARS_STORE_FILE} -v system_domain=${SYSTEM_DOMAIN}"

  for op in ${OPS_FILES}
  do
    arguments="${arguments} -o ops-files/${op}"
  done

  for vf in ${VARS_FILES}
  do
    arguments="${arguments} -l vars-files/${vf}"
  done

  if [ -n "${release_name}" ]; then
    cat << EOF > create-provided-release.yml
---
- type: replace
  path: /releases/name=${release_name}
  value:
    name: ${release_name}
    version: create
    url: file://${root_dir}/release
EOF
    arguments="${arguments} -o create-provided-release.yml"
  fi

  INTERPOLATED_MANIFEST=$(mktemp)
  export INTERPOLATED_MANIFEST

  # We are intentionally passing a series of arguments here:
  # shellcheck disable=SC2086
  bosh \
    -n \
    interpolate ${arguments} \
    --var-errs \
    "${bosh_manifest}" \
    > "${INTERPOLATED_MANIFEST}"
}

write_uptimer_deploy_config() {
  local deployment_name
  deployment_name=${1}

  local manifest
  manifest=${2}

  set +x
  echo '{}' | jq --arg cf_api api.${SYSTEM_DOMAIN} \
    --arg admin_password $(bosh int --path=/cf_admin_password vars-store/"${VARS_STORE_FILE}") \
    --arg app_domain ${SYSTEM_DOMAIN} \
    --arg manifest $manifest \
    --arg deployment_name $deployment_name \
    '{
      "while": [{
        "command":"bosh",
        "command_args":["--tty", "-n", "deploy", $manifest, "-d", $deployment_name]
      }],
      "cf": {
        "api": $cf_api,
        "app_domain": $app_domain,
        "admin_user": "admin",
        "admin_password": $admin_password
      }
    }'
  set -x
}

function uptimer_bosh_deploy() {
  local deployment_name
  deployment_name=$(bosh interpolate "${INTERPOLATED_MANIFEST}" --path /name)

  uptimer_config=$(mktemp)
  write_uptimer_deploy_config "${deployment_name}" "${INTERPOLATED_MANIFEST}" > ${uptimer_config}
  set +e
  local exitStatus
  uptimer -configFile ${uptimer_config}
  exitStatus=$?
  set -e

  # exitStatus 64 means that there was downtime, but the deployment was successful
  if [ "${FAIL_ON_DOWNTIME}" = "false" ] && [ $exitStatus == 64 ]; then
    exit 0
  fi

  exit $exitStatus
}

function bosh_deploy() {
  local deployment_name
  deployment_name=$(bosh interpolate "${INTERPOLATED_MANIFEST}" --path /name)

  if ${DEPLOY_WITH_UPTIME_MEASUREMENTS}; then
    uptimer_bosh_deploy
  else
    bosh \
      -n \
      -d "${deployment_name}" \
      deploy \
      "${INTERPOLATED_MANIFEST}"
  fi
}

function remove_vars_store() {
  rm -f vars-store/"${VARS_STORE_FILE}"
}
